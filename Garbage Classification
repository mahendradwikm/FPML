{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":189983,"sourceType":"datasetVersion","datasetId":81794}],"dockerImageVersionId":30235,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-30T01:30:38.399674Z","iopub.execute_input":"2024-05-30T01:30:38.400994Z","iopub.status.idle":"2024-05-30T01:30:38.438060Z","shell.execute_reply.started":"2024-05-30T01:30:38.400866Z","shell.execute_reply":"2024-05-30T01:30:38.436955Z"}}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","metadata":{"execution":{"iopub.status.busy":"2024-05-30T01:30:38.439989Z","iopub.execute_input":"2024-05-30T01:30:38.440640Z","iopub.status.idle":"2024-05-30T01:30:47.231470Z","shell.execute_reply.started":"2024-05-30T01:30:38.440603Z","shell.execute_reply":"2024-05-30T01:30:47.230089Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import tensorflow.keras as keras","metadata":{"execution":{"iopub.status.busy":"2024-05-30T01:30:47.233192Z","iopub.execute_input":"2024-05-30T01:30:47.233889Z","iopub.status.idle":"2024-05-30T01:30:47.240842Z","shell.execute_reply.started":"2024-05-30T01:30:47.233848Z","shell.execute_reply":"2024-05-30T01:30:47.239043Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"import cv2\nimg=cv2.imread(\"../input/garbage-classification/Garbage classification/Garbage classification/trash/trash1.jpg\")\nprint(\"The dimensions of the image are:\", img.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-30T01:30:59.369241Z","iopub.execute_input":"2024-05-30T01:30:59.369673Z","iopub.status.idle":"2024-05-30T01:30:59.644042Z","shell.execute_reply.started":"2024-05-30T01:30:59.369641Z","shell.execute_reply":"2024-05-30T01:30:59.642610Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"The dimensions of the image are: (384, 512, 3)\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nplt.imshow(img)","metadata":{"execution":{"iopub.status.busy":"2024-05-30T01:31:03.424820Z","iopub.execute_input":"2024-05-30T01:31:03.425353Z","iopub.status.idle":"2024-05-30T01:31:03.720629Z","shell.execute_reply.started":"2024-05-30T01:31:03.425307Z","shell.execute_reply":"2024-05-30T01:31:03.719119Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"<matplotlib.image.AxesImage at 0x794b9e1ddfd0>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":"## ImageDataGenerator generates batches of tensor image data with real-time data augmentation.\n","metadata":{}},{"cell_type":"code","source":"import glob\ncardboard = glob.glob('../input/garbage-classification/Garbage classification/Garbage classification/cardboard/*.*')\nglass = glob.glob('../input/garbage-classification/Garbage classification/Garbage classification/glass/*.*')\nmetal = glob.glob('../input/garbage-classification/Garbage classification/Garbage classification/metal/*.*')\npaper = glob.glob('../input/garbage-classification/Garbage classification/Garbage classification/paper/*.*')\nplastic = glob.glob('../input/garbage-classification/Garbage classification/Garbage classification/plastic/*.*')\ntrash = glob.glob('../input/garbage-classification/Garbage classification/Garbage classification/trash/*.*')\ndata = []\nlabels = []\n\nfrom tqdm import tqdm\n\nfor i in tqdm(cardboard):   \n    image=tf.keras.preprocessing.image.load_img(i, color_mode='rgb', \n    target_size= (384,512))\n    image=np.array(image)\n    data.append(image)\n    labels.append(0)\n    \nfor i in tqdm(glass):   \n    image=tf.keras.preprocessing.image.load_img(i, color_mode='rgb', \n    target_size= (384,512))\n    image=np.array(image)\n    data.append(image)\n    labels.append(1)\n    \nfor i in tqdm(metal):   \n    image=tf.keras.preprocessing.image.load_img(i, color_mode='rgb', \n    target_size= (384,512))\n    image=np.array(image)\n    data.append(image)\n    labels.append(2)\n    \nfor i in tqdm(paper):   \n    image=tf.keras.preprocessing.image.load_img(i, color_mode='rgb', \n    target_size= (384,512))\n    image=np.array(image)\n    data.append(image)\n    labels.append(3)\n    \nfor i in tqdm(plastic):   \n    image=tf.keras.preprocessing.image.load_img(i, color_mode='rgb', \n    target_size= (384,512))\n    image=np.array(image)\n    data.append(image)\n    labels.append(4)\n    \nfor i in tqdm(trash):   \n    image=tf.keras.preprocessing.image.load_img(i, color_mode='rgb', \n    target_size= (384,512))\n    image=np.array(image)\n    data.append(image)\n    labels.append(5)\n\ndata = np.array(data)\nlabels = np.array(labels)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, ytrain, ytest = train_test_split(data, labels, test_size=0.2,\n                                                random_state=42)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-30T01:31:17.832553Z","iopub.execute_input":"2024-05-30T01:31:17.832993Z","iopub.status.idle":"2024-05-30T01:31:40.181448Z","shell.execute_reply.started":"2024-05-30T01:31:17.832959Z","shell.execute_reply":"2024-05-30T01:31:40.179748Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stderr","text":"100%|██████████| 403/403 [00:03<00:00, 122.07it/s]\n100%|██████████| 501/501 [00:03<00:00, 132.97it/s]\n100%|██████████| 410/410 [00:03<00:00, 130.10it/s]\n100%|██████████| 594/594 [00:04<00:00, 122.80it/s]\n100%|██████████| 482/482 [00:03<00:00, 131.39it/s]\n100%|██████████| 137/137 [00:01<00:00, 132.79it/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# datagen = ImageDataGenerator(rescale=1./255,\n#                                       zoom_range=0.2,\n#                                       width_shift_range=0.2,\n#                                       height_shift_range=0.2,\n#                                       validation_split=0.2\n#                                       )\n# train_data = datagen.flow_from_directory('../input/garbage-classification/Garbage classification/Garbage classification/',\n#                                                      target_size=(384,512),\n#                                                      batch_size=32,\n#                                                      class_mode = 'categorical',\n#                                                      subset = 'training')\n                                      \n# validation_data = datagen.flow_from_directory('../input/garbage-classification/Garbage classification/Garbage classification/',\n#                                                      target_size=(384,512),\n#                                                      batch_size=32,\n#                                                      class_mode = 'categorical',\n#                                                      subset = 'validation')\n","metadata":{"execution":{"iopub.status.busy":"2022-09-09T18:27:04.338711Z","iopub.execute_input":"2022-09-09T18:27:04.33919Z","iopub.status.idle":"2022-09-09T18:27:04.345806Z","shell.execute_reply.started":"2022-09-09T18:27:04.339144Z","shell.execute_reply":"2022-09-09T18:27:04.344281Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\n\n# folder path\ndir_path = \"../input/garbage-classification/Garbage classification/Garbage classification/\"\ncount = 0\n# Iterate directory\nfor path in os.listdir(dir_path):\n    # check if current path is a file\n    new_path=dir_path+path+\"/\"\n    \n    for path_upd in os.listdir(new_path):\n        image_path=new_path+path_upd\n        \n        if os.path.isfile(image_path):\n            count += 1\n    print(f\"The count of {path} is: {count}\")\n    count=0","metadata":{"execution":{"iopub.status.busy":"2024-05-30T01:31:49.992439Z","iopub.execute_input":"2024-05-30T01:31:49.992978Z","iopub.status.idle":"2024-05-30T01:31:51.247985Z","shell.execute_reply.started":"2024-05-30T01:31:49.992932Z","shell.execute_reply":"2024-05-30T01:31:51.246379Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"The count of metal is: 410\nThe count of glass is: 501\nThe count of paper is: 594\nThe count of trash is: 137\nThe count of cardboard is: 403\nThe count of plastic is: 482\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## There trash class has very less samples. Also, to increase the classification capability, I will use contrastive learning which will enable me to get a good accuracy inspite of using transfer learning and synthetic samples.","metadata":{}},{"cell_type":"markdown","source":"# Implementing contrastive training","metadata":{}},{"cell_type":"markdown","source":"## Creating an encoder","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def create_encoder():\n    model = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(32,(3,3),input_shape=(384,512,3),activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n        \n    tf.keras.layers.Conv2D(128,(3,3),activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.4),\n\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256,activation='relu')])\n    return model\n\n\nencoder = create_encoder()\nprint(encoder.summary())\n","metadata":{"execution":{"iopub.status.busy":"2024-05-30T01:32:01.082940Z","iopub.execute_input":"2024-05-30T01:32:01.083713Z","iopub.status.idle":"2024-05-30T01:32:02.179654Z","shell.execute_reply.started":"2024-05-30T01:32:01.083668Z","shell.execute_reply":"2024-05-30T01:32:02.178371Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Model: \"sequential\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nconv2d (Conv2D)              (None, 382, 510, 32)      896       \n_________________________________________________________________\nmax_pooling2d (MaxPooling2D) (None, 191, 255, 32)      0         \n_________________________________________________________________\nconv2d_1 (Conv2D)            (None, 189, 253, 64)      18496     \n_________________________________________________________________\nmax_pooling2d_1 (MaxPooling2 (None, 94, 126, 64)       0         \n_________________________________________________________________\nconv2d_2 (Conv2D)            (None, 92, 124, 128)      73856     \n_________________________________________________________________\nmax_pooling2d_2 (MaxPooling2 (None, 46, 62, 128)       0         \n_________________________________________________________________\ndropout (Dropout)            (None, 46, 62, 128)       0         \n_________________________________________________________________\nflatten (Flatten)            (None, 365056)            0         \n_________________________________________________________________\ndense (Dense)                (None, 256)               93454592  \n=================================================================\nTotal params: 93,547,840\nTrainable params: 93,547,840\nNon-trainable params: 0\n_________________________________________________________________\nNone\n","output_type":"stream"}]},{"cell_type":"code","source":"import tensorflow.keras.layers as layers","metadata":{"execution":{"iopub.status.busy":"2024-05-30T01:32:05.684911Z","iopub.execute_input":"2024-05-30T01:32:05.685379Z","iopub.status.idle":"2024-05-30T01:32:05.694099Z","shell.execute_reply.started":"2024-05-30T01:32:05.685340Z","shell.execute_reply":"2024-05-30T01:32:05.692190Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"## Creating the classifier","metadata":{}},{"cell_type":"code","source":"def create_classifier(encoder, trainable=True):\n\n    for layer in encoder.layers:\n        layer.trainable = trainable\n\n    inputs = keras.Input(shape=(384,512,3))\n    features = encoder(inputs)\n    features = layers.Dropout(0.1)(features)\n    features = layers.Dense(512, activation=\"relu\")(features)\n    features = layers.Dropout(0.1)(features)\n    outputs = layers.Dense(6, activation=\"softmax\")(features)\n\n    model = keras.Model(inputs=inputs, outputs=outputs, name=\"classifier\")\n    model.compile(\n        optimizer=keras.optimizers.Adam(0.001),\n        loss=keras.losses.SparseCategoricalCrossentropy(),\n        metrics=[keras.metrics.SparseCategoricalAccuracy()],\n    )\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-05-30T01:32:08.372542Z","iopub.execute_input":"2024-05-30T01:32:08.373058Z","iopub.status.idle":"2024-05-30T01:32:08.385609Z","shell.execute_reply.started":"2024-05-30T01:32:08.373015Z","shell.execute_reply":"2024-05-30T01:32:08.384287Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":"## Step 1:Training the complete encoder+classifier ","metadata":{}},{"cell_type":"code","source":"encoder = create_encoder()\nclassifier = create_classifier(encoder)\nclassifier.summary()\n\nhistory=classifier.fit(X_train, ytrain,validation_split=0.2, epochs=5)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-30T01:32:11.061306Z","iopub.execute_input":"2024-05-30T01:32:11.061800Z","iopub.status.idle":"2024-05-30T01:55:44.418717Z","shell.execute_reply.started":"2024-05-30T01:32:11.061753Z","shell.execute_reply":"2024-05-30T01:55:44.417200Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Model: \"classifier\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ninput_1 (InputLayer)         [(None, 384, 512, 3)]     0         \n_________________________________________________________________\nsequential_1 (Sequential)    (None, 256)               93547840  \n_________________________________________________________________\ndropout_2 (Dropout)          (None, 256)               0         \n_________________________________________________________________\ndense_2 (Dense)              (None, 512)               131584    \n_________________________________________________________________\ndropout_3 (Dropout)          (None, 512)               0         \n_________________________________________________________________\ndense_3 (Dense)              (None, 6)                 3078      \n=================================================================\nTotal params: 93,682,502\nTrainable params: 93,682,502\nNon-trainable params: 0\n_________________________________________________________________\nEpoch 1/5\n51/51 [==============================] - 293s 6s/step - loss: 134.6819 - sparse_categorical_accuracy: 0.2104 - val_loss: 1.7713 - val_sparse_categorical_accuracy: 0.2420\nEpoch 2/5\n51/51 [==============================] - 281s 6s/step - loss: 1.7361 - sparse_categorical_accuracy: 0.2580 - val_loss: 1.7282 - val_sparse_categorical_accuracy: 0.2593\nEpoch 3/5\n51/51 [==============================] - 281s 6s/step - loss: 1.5905 - sparse_categorical_accuracy: 0.3199 - val_loss: 1.6863 - val_sparse_categorical_accuracy: 0.2469\nEpoch 4/5\n51/51 [==============================] - 277s 5s/step - loss: 1.4250 - sparse_categorical_accuracy: 0.4295 - val_loss: 1.8405 - val_sparse_categorical_accuracy: 0.3136\nEpoch 5/5\n51/51 [==============================] - 279s 5s/step - loss: 1.1523 - sparse_categorical_accuracy: 0.5476 - val_loss: 2.0177 - val_sparse_categorical_accuracy: 0.3012\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Step 2: Freezing the classifier and training the encoder so that encoder learns to predict the most optimal image embeddings","metadata":{}},{"cell_type":"code","source":"class SupervisedContrastiveLoss(keras.losses.Loss):\n    def __init__(self, temperature=1, name=None):\n        super(SupervisedContrastiveLoss, self).__init__(name=name)\n        self.temperature = temperature\n\n    def __call__(self, labels, feature_vectors, sample_weight=None):\n        # Normalize feature vectors\n        feature_vectors_normalized = tf.math.l2_normalize(feature_vectors, axis=1)\n        # Compute logits\n        logits = tf.divide(\n            tf.matmul(\n                feature_vectors_normalized, tf.transpose(feature_vectors_normalized)\n            ),\n            self.temperature,\n        )\n        return tfa.losses.npairs_loss(tf.squeeze(labels), logits)\n\n\ndef add_projection_head(encoder):\n    inputs = keras.Input(shape=(384,512,3))\n    features = encoder(inputs)\n    outputs = layers.Dense(256, activation=\"relu\")(features)\n    model = keras.Model(\n        inputs=inputs, outputs=outputs, name=\"encoder_with_projection-head\"\n    )\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-05-30T01:55:44.421915Z","iopub.execute_input":"2024-05-30T01:55:44.422361Z","iopub.status.idle":"2024-05-30T01:55:44.434840Z","shell.execute_reply.started":"2024-05-30T01:55:44.422320Z","shell.execute_reply":"2024-05-30T01:55:44.433376Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"!pip install tensorflow-addons","metadata":{"execution":{"iopub.status.busy":"2024-05-30T01:55:44.436575Z","iopub.execute_input":"2024-05-30T01:55:44.436943Z","iopub.status.idle":"2024-05-30T01:56:20.300823Z","shell.execute_reply.started":"2024-05-30T01:55:44.436911Z","shell.execute_reply":"2024-05-30T01:56:20.299552Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Requirement already satisfied: tensorflow-addons in /opt/conda/lib/python3.7/site-packages (0.14.0)\nRequirement already satisfied: typeguard>=2.7 in /opt/conda/lib/python3.7/site-packages (from tensorflow-addons) (2.13.3)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\u001b[33mWARNING: There was an error checking the latest version of pip.\u001b[0m\u001b[33m\n\u001b[0m","output_type":"stream"}]},{"cell_type":"code","source":"import tensorflow_addons as tfa","metadata":{"execution":{"iopub.status.busy":"2024-05-30T01:56:20.304458Z","iopub.execute_input":"2024-05-30T01:56:20.304894Z","iopub.status.idle":"2024-05-30T01:56:20.503130Z","shell.execute_reply.started":"2024-05-30T01:56:20.304850Z","shell.execute_reply":"2024-05-30T01:56:20.501818Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"learning_rate=0.001\ntemperature=0.05\nencoder = create_encoder()\n\nencoder_with_projection_head = add_projection_head(encoder)\nencoder_with_projection_head.compile(\n    optimizer=keras.optimizers.Adam(learning_rate),\n    loss=SupervisedContrastiveLoss(temperature),\n)\n\nencoder_with_projection_head.summary()\n\nhistory = encoder_with_projection_head.fit(X_train, ytrain,epochs=20)","metadata":{"execution":{"iopub.status.busy":"2024-05-30T01:56:20.504771Z","iopub.execute_input":"2024-05-30T01:56:20.505207Z","iopub.status.idle":"2024-05-30T03:46:54.425481Z","shell.execute_reply.started":"2024-05-30T01:56:20.505145Z","shell.execute_reply":"2024-05-30T03:46:54.424086Z"},"jupyter":{"source_hidden":true},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"Model: \"encoder_with_projection-head\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ninput_2 (InputLayer)         [(None, 384, 512, 3)]     0         \n_________________________________________________________________\nsequential_2 (Sequential)    (None, 256)               93547840  \n_________________________________________________________________\ndense_5 (Dense)              (None, 256)               65792     \n=================================================================\nTotal params: 93,613,632\nTrainable params: 93,613,632\nNon-trainable params: 0\n_________________________________________________________________\nEpoch 1/20\n64/64 [==============================] - 336s 5s/step - loss: 3.4790\nEpoch 2/20\n64/64 [==============================] - 329s 5s/step - loss: 3.4363\nEpoch 3/20\n64/64 [==============================] - 334s 5s/step - loss: 3.3766\nEpoch 4/20\n64/64 [==============================] - 334s 5s/step - loss: 3.3467\nEpoch 5/20\n64/64 [==============================] - 330s 5s/step - loss: 3.3329\nEpoch 6/20\n64/64 [==============================] - 333s 5s/step - loss: 3.3376\nEpoch 7/20\n64/64 [==============================] - 333s 5s/step - loss: 3.3111\nEpoch 8/20\n64/64 [==============================] - 331s 5s/step - loss: 3.2698\nEpoch 9/20\n64/64 [==============================] - 332s 5s/step - loss: 3.2516\nEpoch 10/20\n64/64 [==============================] - 330s 5s/step - loss: 3.2177\nEpoch 11/20\n64/64 [==============================] - 330s 5s/step - loss: 3.1590\nEpoch 12/20\n64/64 [==============================] - 334s 5s/step - loss: 3.1043\nEpoch 13/20\n64/64 [==============================] - 329s 5s/step - loss: 3.0305\nEpoch 14/20\n64/64 [==============================] - 331s 5s/step - loss: 2.9508\nEpoch 15/20\n64/64 [==============================] - 331s 5s/step - loss: 2.8645\nEpoch 16/20\n64/64 [==============================] - 327s 5s/step - loss: 2.7331\nEpoch 17/20\n64/64 [==============================] - 331s 5s/step - loss: 2.6052\nEpoch 18/20\n64/64 [==============================] - 331s 5s/step - loss: 2.5018\nEpoch 19/20\n64/64 [==============================] - 331s 5s/step - loss: 2.3668\nEpoch 20/20\n64/64 [==============================] - 335s 5s/step - loss: 2.2333\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Step 3: Training the classifier with frozen encoder","metadata":{}},{"cell_type":"code","source":"classifier = create_classifier(encoder, trainable=False)\n\nhistory = classifier.fit(x=X_train, y=ytrain, validation_split=0.2,batch_size=16, epochs=1)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-30T03:46:54.427351Z","iopub.execute_input":"2024-05-30T03:46:54.427716Z","iopub.status.idle":"2024-05-30T03:48:07.666415Z","shell.execute_reply.started":"2024-05-30T03:46:54.427683Z","shell.execute_reply":"2024-05-30T03:48:07.665091Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"101/101 [==============================] - 73s 717ms/step - loss: 326.2983 - sparse_categorical_accuracy: 0.8045 - val_loss: 118.1273 - val_sparse_categorical_accuracy: 0.9605\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Benefit on using contrastive training: With scratch CNN neural network and a small imbalanced dataset we are able to obtain the highest accuracy. Also, the augmentation technique would have made the training computationally very expensive. So, contrastive training solves our 3 problems: Imbalanced Classes, Without using Data Augmentation we obtained very good results, The problem of small dataset was eliminated.","metadata":{}},{"cell_type":"code","source":"!pip install pyyaml h5py\nimport os\n\nimport tensorflow as tf\nfrom tensorflow import keras\n\nprint(tf.version.VERSION)","metadata":{"execution":{"iopub.status.busy":"2024-05-30T03:59:15.227762Z","iopub.execute_input":"2024-05-30T03:59:15.228880Z","iopub.status.idle":"2024-05-30T03:59:49.381875Z","shell.execute_reply.started":"2024-05-30T03:59:15.228825Z","shell.execute_reply":"2024-05-30T03:59:49.380451Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"Requirement already satisfied: pyyaml in /opt/conda/lib/python3.7/site-packages (6.0)\nRequirement already satisfied: h5py in /opt/conda/lib/python3.7/site-packages (3.7.0)\nRequirement already satisfied: numpy>=1.14.5 in /opt/conda/lib/python3.7/site-packages (from h5py) (1.21.6)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\u001b[33mWARNING: There was an error checking the latest version of pip.\u001b[0m\u001b[33m\n\u001b[0m2.6.4\n","output_type":"stream"}]},{"cell_type":"code","source":"classifier.save(\"gbg_clt.h5\")","metadata":{"execution":{"iopub.status.busy":"2024-05-30T04:00:02.293027Z","iopub.execute_input":"2024-05-30T04:00:02.295021Z","iopub.status.idle":"2024-05-30T04:00:02.925533Z","shell.execute_reply.started":"2024-05-30T04:00:02.294946Z","shell.execute_reply":"2024-05-30T04:00:02.924374Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-05-30T03:58:58.494399Z","iopub.execute_input":"2024-05-30T03:58:58.494934Z","iopub.status.idle":"2024-05-30T03:58:58.537106Z","shell.execute_reply.started":"2024-05-30T03:58:58.494892Z","shell.execute_reply":"2024-05-30T03:58:58.535417Z"},"trusted":true},"execution_count":20,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_17/848232826.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'TesModel.h5'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: module 'tensorflow.keras' has no attribute 'model'"],"ename":"AttributeError","evalue":"module 'tensorflow.keras' has no attribute 'model'","output_type":"error"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}